import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import plotly.express as px
from math import ceil
import csv
import psycopg2

# Cargar el archivo de Excel en un DataFrame de pandas
dfespecialista = pd.read_excel('/content/ptaura_2.xlsx')

# Convierte la columna 'fecha' al tipo de dato datetime
dfespecialista["Fecha"] = pd.to_datetime(dfespecialista["Fecha"])
dfespecialista['Ejemplares recolectados'] = dfespecialista['Ejemplares recolectados'].fillna(1).astype(int)
dfespecialista['Ejemplares recolectados'] = dfespecialista['Ejemplares recolectados'].astype(int)
# Mostrar el DataFrame
dfespecialista


# Cargar el archivo de Excel en un DataFrame de pandas
dflista = pd.read_excel('/content/ptlista.xlsx')
# Mostrar el DataFrame
dflista

# juntamos los df de los especialistas con el df lista para que en uno s√≥lo nos de sus caracteristicas
resultado = pd.merge(dfespecialista, dflista, how="left").reset_index(drop=True)

resultado.fillna(0)

# Apply the function to the column, handling missing values:
resultado = dfespecialista
resultado['Ejemplares ajustados'] = resultado['Ejemplares recolectados'].apply(lambda x: ceil(x / 1.2) if not pd.isna(x) else None)
resultado

# codigo para agregar la columna de # numero de rescate"
# viene de la formula =CONTAR.SI.CONJUNTO($B$1:B2154,[@Frente],$D$1:D2154,[@Especie])
resultado['Num rescate'] = resultado.groupby(['Frente', 'Especie']).cumcount() + 1
resultado

# este script es para generar la columna de rango
# viene del dataframe de resultado
# result.sort_values(['fecha', 'frente', 'especie'], inplace=True)

# Realizar la suma acumulativa condicional utilizando transform y groupby
resultado ['Rango'] = resultado.groupby(['Especie', 'Frente'])['Ejemplares ajustados'].transform(pd.Series.cumsum)
resultado

# para generar la columna rango 2
# viene de la formula siguiente
# =SI([@[Ejemplares ajustados]]=1,
# SI([@[Num rescate]]<=1,"1 - "&[@Rango],@INDICE(J:J,FILA()-1)& " - "&[@Rango]),
# SI([@[Num rescate]]<=1,"1 - "&[@Rango],@INDICE(J:J,FILA()-1)+1& " - "&[@Rango]))
resultado['Rango2'] = ''  # Initialize an empty column

for i in range(len(resultado)):
    if resultado.loc[i, 'Ejemplares ajustados'] == 1:
        if resultado.loc[i, 'Num rescate'] <= 1:
            resultado.loc[i, 'Rango2'] = "1 - " + str(resultado.loc[i, 'Rango'])
        else:
            resultado.loc[i, 'Rango2'] = (str(resultado.loc[i-1, 'Rango']) if i > 0 else '0') + " - " + str(resultado.loc[i, 'Rango'])
    else:
        if resultado.loc[i, 'Num rescate'] <= 1:
            resultado.loc[i, 'Rango2'] = "1 - " + str(resultado.loc[i, 'Rango'])
        else:
            resultado.loc[i, 'Rango2'] = str(int(resultado.loc[i-1, 'Rango']) + 1 if i > 0 else 1) + " - " + str(resultado.loc[i, 'Rango'])

print(resultado)

# Es para generar la etiqueta
# viene de la formula ="R"&[@[Num rescate]]&" / " &[@Rango2] & " / " &[@[Clave sp]]& " / " & [@Frente]
# Crear una nueva columna llamada 'Etiqueta' que contiene la cadena construida
resultado['Etiqueta'] = 'R' + resultado['Num rescate'].astype(str) + " / " + resultado['Rango 2'] + " / " + resultado['Clave sp'] + " / " + resultado['Frente']

# Mostrar el resultado
resultado



######## script para generar reporte##############

def conectar():
    try:
        conexion = psycopg2.connect(
            dbname="AURA",
            user="postgres",
            password="carbonaro233",
            host="localhost",
            port="5432"
        )
        return conexion
    except psycopg2.Error as e:
        print("Error al conectar a la base de datos:", e)

def insertar_datos():
    conexion = conectar()
    cursor = conexion.cursor()

    with open('datos.csv', 'r', encoding='utf-8') as archivo_csv:
        lector_csv = csv.reader(archivo_csv)
        next(lector_csv)

        for fila in lector_csv:
            consulta = """
            INSERT INTO datos ("fecha", "frente", "familia", "especie", "nombre_comun", "forma_biologica", "ejemplares_ajustados", "tecnica_de_rescate", "num_rescate", "rango", "rango_2", "clave_sp", "dsm", "altura", "condicion_fisica", "condicion_fitosanitaria", "nom_059", "iucn", "cites", "clave_de_etiqueta", "x_inicio", "y_inicio", "x3", "y3", "x_final", "y_final", "x4", "y4", "ejemplares_recolectados", "propagacion", "prof_mo")
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """
            cursor.execute(consulta, fila)

    conexion.commit()
    conexion.close()

def ejecutar_query(conexion, query, parametros):
    try:
        cursor = conexion.cursor()
        cursor.execute(query, parametros)
        resultados = cursor.fetchall()
        cursor.close()
        return resultados
    except psycopg2.Error as e:
        print("Error al ejecutar la consulta:", e)

def generar_reporte(resultados):
    for fila in resultados:
        print(fila)

def main():
    conexion = conectar()

    fecha = input("Ingrese la fecha (YYYY-MM-DD): ")
    frente = input("Ingrese el frente: ")
    familia = input("Ingrese la familia: ")
    especie = input("Ingrese la especie:")

    query = """
        SELECT *
        FROM tu_tabla
        WHERE fecha = %s AND frente = %s AND familia = %s AND especie = %s
    """

    parametros = (fecha, frente, familia, especie)

    resultados = ejecutar_query(conexion, query, parametros)

    generar_reporte(resultados)

    conexion.close()

if __name__ == "__main__":
    main()

